{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","console","log","this","props","genres","react_default","a","createElement","className","Movie_MoviePoster","poster","alt","title","map","index","MovieGenre","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","MoviePoster","src","_ref","API_KEY","App","state","_renderMovies","_this","movies","movie","src_Movie_0","id","medium_cover_image","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","res","json","data","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAIMA,mLASF,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,QAErBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAD,CAAaC,OAAQR,KAAKC,MAAMO,OAAQC,IAAKT,KAAKC,MAAMS,SAE1DP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKL,KAAKC,MAAMS,OAChBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZN,KAAKC,MAAMC,OAAOS,IAAI,SAACT,EAAQU,GAC9B,OAAOT,EAAAC,EAAAC,cAACQ,EAAD,CAAYX,OAAQA,EAAQY,IAAKF,OAG5CT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CACEY,KAAMhB,KAAKC,MAAMgB,SACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,sBA3BFC,aAoCdC,mLAKF,OACEpB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKmB,IAAKxB,KAAKC,MAAMO,OAAQC,IAAKT,KAAKC,MAAMQ,cAP3Ba,aAa1B,SAAST,EAATY,GAAgC,IAAVvB,EAAUuB,EAAVvB,OACpB,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBJ,GAO1BL,QCxDT6B,EAAU,gEAsFDC,6MArDbC,MAAQ,KAaRC,cAAgB,WAad,OAZeC,EAAKF,MAAMG,OAAOpB,IAAI,SAAAqB,GAEnC,OADAlC,QAAQC,IAAIiC,GAEV7B,EAAAC,EAAAC,cAAC4B,EAAD,CACEnB,IAAKkB,EAAME,GACXxB,MAAOsB,EAAMtB,MACbF,OAAQwB,EAAMG,mBACdjC,OAAQ8B,EAAM9B,OACde,SAAUe,EAAMf,gBAOxBmB,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUZ,EAAKa,WADf,OACLZ,EADKS,EAAAI,KAEXd,EAAKe,SAAS,CACZd,WAHS,wBAAAS,EAAAM,SAAAT,QAObM,SAAW,WACT,OAAOI,MAAMrB,GACVsB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKpB,SACvBqB,MAAM,SAAAC,GAAG,OAAIvD,QAAQC,IAAIsD,yFA9B5BrD,KAAKoC,8CAiCE,IACCL,EAAW/B,KAAK4B,MAAhBG,OACR,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAWyB,EAAS,MAAQ,gBAC9B/B,KAAK4B,MAAMG,OAAS/B,KAAK6B,gBAAkB,kBA9ElCP,aCKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.81e7cdf1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport LinesEllipsis from \"react-lines-ellipsis\";\r\n\r\nclass Movie extends Component {\r\n  static propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.string.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    console.log(this.props.genres);\r\n    return (\r\n      <div className=\"Movie\">\r\n        <div className=\"Movie__Columns\">\r\n          <MoviePoster poster={this.props.poster} alt={this.props.title} />\r\n        </div>\r\n        <div className=\"Movie__Columns\">\r\n          <h1>{this.props.title}</h1>\r\n          <div className=\"Movie__Genres\">\r\n            {this.props.genres.map((genres, index) => {\r\n              return <MovieGenre genres={genres} key={index} />;\r\n            })}\r\n          </div>\r\n          <div className=\"Movie__synopsis\">\r\n            <LinesEllipsis\r\n              text={this.props.synopsis}\r\n              maxLine=\"3\"\r\n              ellipsis=\"...\"\r\n              trimRight\r\n              basedOn=\"letters\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass MoviePoster extends Component {\r\n  static propTypes = {\r\n    poster: PropTypes.string.isRequired\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img src={this.props.poster} alt={this.props.alt} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction MovieGenre({ genres }) {\r\n  return <span className=\"Movie__Genre\">{genres}</span>;\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n  genres: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport \"./Movie.css\";\r\nimport MovieShow from \"./Movie\";\r\n\r\nconst API_KEY = \"https://yts.am/api/v2/list_movies.json?sort_by=download_count\";\r\n\r\nclass App extends Component {\r\n  // Render : componentWillMount() -> render() -> componentDidMount()\r\n  // Update: componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate ->\r\n  // render() -> componentDidUpdate()\r\n\r\n  //컴포넌트 안에 state가 바뀔때마다 render를 한다.\r\n\r\n  //영화 API 불러오기 이전 코드\r\n  // state = {}\r\n\r\n  // componentDidMount(){\r\n  //     setTimeout(() => {\r\n  //         this.setState({\r\n  //             movies : [\r\n  //                 {\r\n  //                     title: \"헝거게임\",\r\n  //                     poster:\"https://t1.daumcdn.net/cfile/tistory/246A924F52A41A0C33\"\r\n  //                 },\r\n  //                 {\r\n  //                     title:\"극한직업\",\r\n  //                     poster: \"https://www.rfa.org/korean/weekly_program/culture_talk/openculture-01292019140941.html/extreme_job_movie_b.jpg\"\r\n  //                 },\r\n  //                 {\r\n  //                     title:\"어벤져스\",\r\n  //                     poster:\"http://image2.megabox.co.kr/mop/poster/2019/1F/1175D3-40C3-4905-9A50-70457E37C875.large.jpg\"\r\n  //                 }\r\n  //             ]\r\n  //         })\r\n  //     },3000);\r\n  // }\r\n\r\n  state = {};\r\n  // componentDidMount() {\r\n  //   fetch(API_KEY) // fetch로 api 내용을 가져와라\r\n  //     .then(res => res.json()) // 위에 작업이 끝나면 then 안에 있는 내용을 진행해라\r\n  //     .then(json => console.log(json)) // 위에 작업이 끝나면 then 안에 있는 내용을 진행해라\r\n  //     .catch(err => console.log(err)); // fetch에서 api 내용을 가져오지 못하면 error를 내라\r\n  //    계속해서 then 을 사용하게 되면 CallBack HELL 이 되어버림 그래서 함수들을 만들어서 작업진행\r\n  // }\r\n\r\n  componentDidMount() {\r\n    this._getMovies();\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map(movie => {\r\n      console.log(movie);\r\n      return (\r\n        <MovieShow\r\n          key={movie.id}\r\n          title={movie.title}\r\n          poster={movie.medium_cover_image}\r\n          genres={movie.genres}\r\n          synopsis={movie.synopsis}\r\n        />\r\n      );\r\n    });\r\n    return movies;\r\n  };\r\n\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi(); //await 내가 준 명령어가 끝나길 기다리는 것 현재 같은 경우 callApi함수가 끝나길 대기\r\n    this.setState({\r\n      movies\r\n    });\r\n  };\r\n\r\n  _callApi = () => {\r\n    return fetch(API_KEY) // fetch로 api 내용을 가져와라\r\n      .then(res => res.json()) // 위에 작업이 끝나면 then 안에 있는 내용을 진행해라\r\n      .then(json => json.data.movies) // 위에 작업이 끝나면 then 안에 있는 내용을 진행해라\r\n      .catch(err => console.log(err)); // fetch에서 api 내용을 가져오지 못하면 error를 내라\r\n  };\r\n\r\n  render() {\r\n    const { movies } = this.state;\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>\r\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}